package inet.controller;

import inet.entity.Post;
import inet.entity.Role;
import inet.repository.PostRepository;
import inet.repository.RoleRepository;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.config.ResourceNotFoundException;
import org.springframework.security.crypto.scrypt.SCryptPasswordEncoder;
import org.springframework.stereotype.Controller;


import inet.entity.User;
import inet.repository.UserRepository;
import org.springframework.web.bind.annotation.*;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @author Edward Grippe
 */
@RestController  // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /users (after Application path)
public class UserController {
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    private final PostRepository postRepository;

    private final RoleRepository roleRepository;

    @Autowired
    public UserController(UserRepository userRepository, PostRepository postRepository, RoleRepository roleRepository) {
        this.userRepository = userRepository;
        this.postRepository = postRepository;
        this.roleRepository = roleRepository;
    }

    /**
     * Class for login credentials.
     */
    private static class UserLogin {
        public String name;
        public String password;
    }

    /**
     * Class for login response.
     */
    private static class LoginResponse {
        public String token;
        public LoginResponse(final String token) {
            this.token = token;
        }
    }

    @PostMapping(path = "/login")
    public LoginResponse login(@RequestBody final UserLogin login) throws ServletException {


        if (login.name == null || login.password == null)
            throw new ServletException("Invalid Login");

        // Check if user exists
        User user = userRepository.findByName(login.name);
        if (user == null)
            throw new ServletException("No such user");

        // Check if password is correct
        SCryptPasswordEncoder scrypt = new SCryptPasswordEncoder();
        if (!scrypt.matches(login.password, user.getPassword()))
            throw new ServletException("Wrong password");

        // get list of user roles and convert to list of role names
        List<String> roles = user.getRoles().stream()
                .map(Role::getName)
                .collect(Collectors.toList());

        // create and return a new JWT
        return new LoginResponse(
                Jwts.builder().setSubject(login.name)
                .claim("userId", user.getId())
                .claim("roles", roles)
                .setIssuedAt(new Date())
                .signWith(SignatureAlgorithm.HS512, "secretkey")
                .compact());
    }

    /**
     * Create a new user and return user token.
     * @param user The new user
     * @return LoginResponse containing a new token
     * @throws ServletException if something goes wrong
     */
    @PostMapping(path = "/create")
    public LoginResponse create(@RequestBody User user) throws ServletException {
        if (user.getPassword() == null || user.getName() == null)
            throw new ServletException("Invalid user credentials");


        if (userRepository.findByName(user.getName()) != null) {
            throw new ServletException("User name does already exist.");
        }

        SCryptPasswordEncoder scrypt = new SCryptPasswordEncoder();
        user.setPassword(scrypt.encode(user.getPassword()));

        user.addRole(roleRepository.findByName("user"));
        user = userRepository.save(user);

        UserLogin ul = new UserLogin();
        ul.name = user.getName();
        ul.password = user.getPassword();

        return login(ul);
    }

    // temporary functionality
    // TODO remove
    @GetMapping(path = "/role/")
    public  List<String> getRole(HttpServletRequest request) throws ServletException {
        Claims claims = (Claims) request.getAttribute("claims");
        return (List<String>) claims.get("roles");
    }

    @GetMapping(path = "/all")
    public Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path = "/{userId}")
    public User getUser(@PathVariable Integer userId) {
        return userRepository.findOne(userId);
    }

    @GetMapping(path = "/{userId}/posts")
    public Iterable<Post> getUserPosts(@PathVariable Integer userId) {
        return postRepository.findByUserId(userId);
    }

    @GetMapping(path = "/name/{userName}")
    public User getUser(@PathVariable String userName) {
        return userRepository.findByName(userName);
    }
}